!!Introduction

!!!Rational
@ch:ngRational

The idea behind FamixNG is to allow the creation of meta-models by composing basic entities rather than using single inheritance.

Take for example a simple model with Classes and Methods. A Class has a ''name'' and ''contains'' methods. A Method has a ''name''. We can create a simple hirarchy:
-NamedEntity
--ContainerEntity
---Class
--Method

But if we introduce AnonymousClass we have a problem, it is a Class (thus a ContainerEntity, but it is not Named).
With composition we could say that there are named entities (that have a name) and there are container entities (that contain other entities). A Class is composed of NamedEntity and ContainerEntity, an AnonymousClass is a composition of ContainerEntity, and a Method is composition of NamedEntity.

FamixNg offers a collection of basic concepts (NamedEntities, ScopingEntities, ...) and a better mechanism to handle bi-directional associations to simplify the creation of new meta-models.

!!!General Organisation
@ch:ngPhilosophy

The composition is implemented using Pharo (stateful) traits, and the concepts of the meta-model are implemented using Pharo classes.
A new metamodel is generated using a *@Builder>ch:Builder* by telling it how the new concepts will be composed and what are their relationships.

Because one may want to add behaviour to the generated Pharo classes, there is always two classes for each concept, the ''generated'' one, and the ''visible'' (or used) one.
Thus if one whishes to have a NamedEntity, there will be a NamedEntityGenerated Pharo class, containing all the properties specified to  the builder, and a NamedEntity pharo class inheriting from the first to which one may add new methods.
Each time the builder will (re-)generate the meta-model classes, it will overwrite the NamedEntityGenerated class, but it will not touch the NamedEntity and its methods.

The same goes for the traits used to create composable basic entities, there is a generated trait and a used one.

This may seem a bit complex as for a single entity that one whishes to create, there can be two Pharo traits and two Pharo classes created: The "generated" trait, the "used" trait (inheriting from the first one), the "generated" class (using the second trait), and the "used" class (inheriting from the first class).
But you should not need to remember all this as the syntax of the meta-model building is intended to hide these details from you.
Also remeber that traits are needed only if you want to create a compasable basic entity that will be reused to create several concepts in the future.
For basic uses, one should be able to create a new meta-model by composing the existing basic entities without the need to create new ones.

!!!Catalog of Concepts
@ch:ngCatalog

The philosophy of FamixNG is to offer a catalog of simple traits, one trait for each individual property offered.
Thus for example expressing that an entity may have a comment modelled by two traits: ==Tcomment== that holds the comment and ==TWithComment== modelling any entity that can have a comment.
When creating a new metamodel, one can then have a concept inheriting from ==TWithComment==.

!!!!Scoping traits

+Scoping traits>file://figures/scopes.png+

-TPackageable
-TPackage
-TWithPackages
-TNamespace
-TWithNamespaces
-TNamespaceEntity
-TNamed
-TScopingEntity
-TWithClassScope

!!!!C/C++ scoping traits

-TModule
-TWithModule

!!!!Type traits

+Type traits>file://figures/types.png+


-TType
-TWithTypes
-TTypeAlias
-TWithTypeAliases
-TTypedStructure
-TWithTypedStructures
-TParameterizedType
-TWithParameterizedTypes
-TParameterizedTypeUser
-TWithParameterizedTypeUsers
-TTrait
-TWithTrait

!!!!Behvioural traits

+Behavioural traits>file://figures/behaviors.png+

-TMethod
-TWithMethods
-TWithSignature
-TFunction
-TWithFunction

!!!!Variable traits

+Variable traits>file://figures/vars.png+

-TImplicitVariable
-TWithImplicitVariables
-TLocalVariable
-TWithLocalVariables
-TGlobalVariable
-TGlobalVariableScope
-TParameter
-TWithParameters
-TAttribute
-TWithAttributes
-TEnumValue
-TWithEnumValues

!!!!Association traits

+Association traits>file://figures/assocs.png+

-TAssociation
-TReference
-TWithReferences
-TReferenceable
-TAccessible
-TAccess
-TWithAccesses
-TInvocable
-TInvocation
-TWithInvocations
-TInvocationsReceiver
-TSuper
-TSuperInheritance
-TWithSuperInheritances
-TSub
-TSubInheritance
-TWithSubInheritances

!!!!C/C++ Association traits

-TDereferencedInvocation
-TWithDereferencedInvocations

!!!!Annotation traits

+Annotation traits>file://figures/annot.png+

-TAnnotationType
-TWithAnnotationTypes
-TAnnotationInstance
-TWithAnnotationInstances
-TAnnotationInstanceAttribute
-TWithAnnotationInstanceAttributes
-TAnnotationTypeAttribute
-TTypedAnnotationInstance
-TTypedAnnotationInstanceAttribute

!!!!Exception traits

+Annotation traits>file://figures/exceptions.png+

-TException
-TWithExceptions
-TCaughtException
-TWithCaughtExceptions
-TThrownException
-TWithThrownExceptions
-TDeclaredException
-TWithDeclaredExceptions

!!!!Miscelaneous traits

+Miscelaneous traits>file://figures/misc.png+

-TTemplate
-TWithTemplates
-TTemplateUser
-TWithModifiers
-TWithComments
-TComment

!!!!C/C++ Miscelaneous traits

-TCompilationUnit
-TWithCompilationUnit
-TPreprocessorIfdef
-TPreprocessorDefine

!!!!Technical traits

+Technical traits>file://figures/technic.png+

-TSourceLanguage
-TWithSourceLanguage
-TSourceAnchor
-TWithSourceAnchor
-TFileAnchor

!!!!File traits

+File traits>file://figures/files.png+

-TFile
-TWithFiles

!!!!C/C++ File traits

-THeader
-TWithHeader
-TFileInclude
-TWithFileInclude
