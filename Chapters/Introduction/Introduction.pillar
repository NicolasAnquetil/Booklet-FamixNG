!!Introduction

!!!Rational
@ch:ngRational

The idea behind FamixNG is to allow the creation of meta-models by composing basic entities rather than using single inheritance.

Take for example a simple model with Classes and Methods. A Class has a ''name'' and ''contains'' methods. A Method has a ''name''. The Figure *@simpleHierarchy* shows a simple hierarchy of these classes.

+A simple meta-model entities hierarchy.>figures/intro1.png|width=35|label=simpleHierarchy+

However, if we introduce AnonymousClass we have a problem, it is a Class (thus a ContainerEntity, but it is not Named).
With composition, we could say that there are named entities (that have a name) and there are container entities (that contain other entities). A Class is composed of NamedEntity and ContainerEntity, an AnonymousClass is a composition of ContainerEntity, and a Method is a composition of NamedEntity.

FamixNG offers a collection of fundamental concepts (NamedEntities, ScopingEntities...) and a better mechanism to handle bi-directional associations to simplify the creation of new meta-models.

!!!General Organisation
@ch:ngPhilosophy

The composition is implemented using Pharo (stateful) traits, and the concepts of the meta-model are implemented using Pharo classes.
A new metamodel is generated using a *@Builder>ch:Builder* by telling it how the new concepts are composed and what are their relationships.

The FamixNG provides all fundamental concepts as a library of traits. When you create a custom meta-model, you compose the entities of your meta-models (represented by classes) from these traits. You may want to create own traits if you require reusability of a concept they provide.

In the most basic usages, one should be able to create a new meta-model by composing the existing fundamental concepts without the need to create new ones.

!!!Catalog of Concepts
@ch:ngCatalog

!!!!Access

+Access>figures/Access.png|width=50|label=Access+

!!!!AnnotationInstance

+AnnotationInstance>figures/AnnotationInstance.png|width=36|label=AnnotationInstance+

!!!!AnnotationInstanceAttribute

+AnnotationInstanceAttribute>figures/AnnotationInstanceAttribute.png|width=43|label=AnnotationInstanceAttribute+

!!!!AnnotationType

+AnnotationType>figures/AnnotationType.png|width=59|label=AnnotationType+

!!!!AnnotationTypeAttribute

+AnnotationTypeAttribute>figures/AnnotationTypeAttribute.png|width=48|label=AnnotationTypeAttribute+

!!!!Association

+Association>figures/Association.png|width=25|label=Association+

!!!!Attribute

+Attribute>figures/Attribute.png|width=24|label=Attribute+

!!!!CaughtException

+CaughtException>figures/CaughtException.png|width=30|label=CaughtException+

!!!!Class

+Class>figures/Class.png|width=11|label=Class+

!!!!ClassHierarchyNavigation

+ClassHierarchyNavigation>figures/ClassHierarchyNavigation.png|width=28|label=ClassHierarchyNavigation+

!!!!ClassMetrics

+ClassMetrics>figures/ClassMetrics.png|width=39|label=ClassMetrics+

!!!!Comment

+Comment>figures/Comment.png|width=25|label=Comment+

!!!!CompilationUnit

+CompilationUnit>figures/CompilationUnit.png|width=34|label=CompilationUnit+

!!!!DeclaredException

+DeclaredException>figures/DeclaredException.png|width=35|label=DeclaredException+

!!!!DereferencedInvocation

+DereferencedInvocation>figures/DereferencedInvocation.png|width=42|label=DereferencedInvocation+

!!!!EnumValue

+EnumValue>figures/EnumValue.png|width=24|label=EnumValue+

!!!!Exception

+Exception>figures/Exception.png|width=26|label=Exception+

!!!!File

+File>figures/File.png|width=23|label=File+

!!!!FileAnchor

+FileAnchor>figures/FileAnchor.png|width=19|label=FileAnchor+

!!!!FileInclude

+FileInclude>figures/FileInclude.png|width=56|label=FileInclude+

!!!!Folder

+Folder>figures/Folder.png|width=37|label=Folder+

!!!!Function

+Function>figures/Function.png|width=22|label=Function+

!!!!GlobalVariable

+GlobalVariable>figures/GlobalVariable.png|width=27|label=GlobalVariable+

!!!!Header

+Header>figures/Header.png|width=20|label=Header+

!!!!ImplicitVariable

+ImplicitVariable>figures/ImplicitVariable.png|width=34|label=ImplicitVariable+

!!!!Invocable

+Invocable>figures/Invocable.png|width=63|label=Invocable+

!!!!LCOMMetrics

+LCOMMetrics>figures/LCOMMetrics.png|width=17|label=LCOMMetrics+

!!!!LocalVariable

+LocalVariable>figures/LocalVariable.png|width=33|label=LocalVariable+

!!!!Method

+Method>figures/Method.png|width=23|label=Method+

!!!!Module

+Module>figures/Module.png|width=26|label=Module+

!!!!Named

+Named>figures/Named.png|width=16|label=Named+

!!!!Namespace

+Namespace>figures/Namespace.png|width=49|label=Namespace+

!!!!Package

+Package>figures/Package.png|width=25|label=Package+

!!!!Parameter

+Parameter>figures/Parameter.png|width=36|label=Parameter+

!!!!ParameterizedType

+ParameterizedType>figures/ParameterizedType.png|width=36|label=ParameterizedType+

!!!!ParameterizedTypeUser

+ParameterizedTypeUser>figures/ParameterizedTypeUser.png|width=47|label=ParameterizedTypeUser+

!!!!PossibleStub

+PossibleStub>figures/PossibleStub.png|width=17|label=PossibleStub+

!!!!PreprocessorDefine

+PreprocessorDefine>figures/PreprocessorDefine.png|width=23|label=PreprocessorDefine+

!!!!PreprocessorIfdef

+PreprocessorIfdef>figures/PreprocessorIfdef.png|width=21|label=PreprocessorIfdef+

!!!!Reference

+Reference>figures/Reference.png|width=50|label=Reference+

!!!!ScopingEntity

+ScopingEntity>figures/ScopingEntity.png|width=31|label=ScopingEntity+

!!!!SourceAnchor

+SourceAnchor>figures/SourceAnchor.png|width=46|label=SourceAnchor+

!!!!SourceLanguage

+SourceLanguage>figures/SourceLanguage.png|width=35|label=SourceLanguage+

!!!!Sub

+Sub>figures/Sub.png|width=14|label=Sub+

!!!!SubInheritance

+SubInheritance>figures/SubInheritance.png|width=30|label=SubInheritance+

!!!!SuperInheritance

+SuperInheritance>figures/SuperInheritance.png|width=29|label=SuperInheritance+

!!!!Template

+Template>figures/Template.png|width=45|label=Template+

!!!!ThrownException

+ThrownException>figures/ThrownException.png|width=32|label=ThrownException+





