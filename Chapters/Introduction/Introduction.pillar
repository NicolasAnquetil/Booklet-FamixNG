!!Introduction

!!!Rational
@ch:ngRational

The idea behind FamixNG is to allow the creation of meta-models by composing basic entities rather than using single inheritance.

Take for example a simple model with Classes and Methods. A Class has a ''name'' and ''contains'' methods. A Method has a ''name''. The Figure *@simpleHierarchy* shows a simple hierarchy of these classes.

+A simple meta-model entities hierarchy.>figures/intro1.png|width=35|label=simpleHierarchy+

However, if we introduce AnonymousClass we have a problem, it is a Class (thus a ContainerEntity, but it is not Named).
With composition, we could say that there are named entities (that have a name) and there are container entities (that contain other entities). A Class is composed of NamedEntity and ContainerEntity, an AnonymousClass is a composition of ContainerEntity, and a Method is a composition of NamedEntity.

FamixNG offers a collection of fundamental concepts (NamedEntities, ScopingEntities...) and a better mechanism to handle bi-directional associations to simplify the creation of new meta-models.

!!!General Organisation
@ch:ngPhilosophy

The composition is implemented using Pharo (stateful) traits, and the concepts of the meta-model are implemented using Pharo classes.
A new metamodel is generated using a *@Builder>ch:Builder* by telling it how the new concepts are composed and what are their relationships.

The FamixNG provides all fundamental concepts as a library of traits. When you create a custom meta-model, you compose the entities of your meta-models (represented by classes) from these traits. You may want to create own traits if you require reusability of a concept they provide.

In the most basic usages, one should be able to create a new meta-model by composing the existing fundamental concepts without the need to create new ones.

!!!Catalog of Concepts
@ch:ngCatalog

+Access>figures/intro1.png|width=35|label=simpleHierarchy+

+Access>figures/Access.png|width=35|label=Access+

+AnnotationInstance>figures/AnnotationInstance.png|width=35|label=AnnotationInstance+

+AnnotationInstanceAttribute>figures/AnnotationInstanceAttribute.png|width=35|label=AnnotationInstanceAttribute+

+AnnotationType>figures/AnnotationType.png|width=35|label=AnnotationType+

+AnnotationTypeAttribute>figures/AnnotationTypeAttribute.png|width=35|label=AnnotationTypeAttribute+

+Association>figures/Association.png|width=35|label=Association+

+Attribute>figures/Attribute.png|width=35|label=Attribute+

+CaughtException>figures/CaughtException.png|width=35|label=CaughtException+

+Class>figures/Class.png|width=35|label=Class+

+ClassHierarchyNavigation>figures/ClassHierarchyNavigation.png|width=35|label=ClassHierarchyNavigation+

+ClassMetrics>figures/ClassMetrics.png|width=35|label=ClassMetrics+

+Comment>figures/Comment.png|width=35|label=Comment+

+CompilationUnit>figures/CompilationUnit.png|width=35|label=CompilationUnit+

+DeclaredException>figures/DeclaredException.png|width=35|label=DeclaredException+

+DereferencedInvocation>figures/DereferencedInvocation.png|width=35|label=DereferencedInvocation+

+EnumValue>figures/EnumValue.png|width=35|label=EnumValue+

+Exception>figures/Exception.png|width=35|label=Exception+

+File>figures/File.png|width=35|label=File+

+FileAnchor>figures/FileAnchor.png|width=35|label=FileAnchor+

+FileInclude>figures/FileInclude.png|width=35|label=FileInclude+

+Folder>figures/Folder.png|width=35|label=Folder+

+Function>figures/Function.png|width=35|label=Function+

+GlobalVariable>figures/GlobalVariable.png|width=35|label=GlobalVariable+

+Header>figures/Header.png|width=35|label=Header+

+ImplicitVariable>figures/ImplicitVariable.png|width=35|label=ImplicitVariable+

+Invocable>figures/Invocable.png|width=35|label=Invocable+

+LCOMMetrics>figures/LCOMMetrics.png|width=35|label=LCOMMetrics+

+LocalVariable>figures/LocalVariable.png|width=35|label=LocalVariable+

+Method>figures/Method.png|width=35|label=Method+

+Module>figures/Module.png|width=35|label=Module+

+Named>figures/Named.png|width=35|label=Named+

+Namespace>figures/Namespace.png|width=35|label=Namespace+

+Package>figures/Package.png|width=35|label=Package+

+Parameter>figures/Parameter.png|width=35|label=Parameter+

+ParameterizedType>figures/ParameterizedType.png|width=35|label=ParameterizedType+

+ParameterizedTypeUser>figures/ParameterizedTypeUser.png|width=35|label=ParameterizedTypeUser+

+PossibleStub>figures/PossibleStub.png|width=35|label=PossibleStub+

+PreprocessorDefine>figures/PreprocessorDefine.png|width=35|label=PreprocessorDefine+

+PreprocessorIfdef>figures/PreprocessorIfdef.png|width=35|label=PreprocessorIfdef+

+Reference>figures/Reference.png|width=35|label=Reference+

+ScopingEntity>figures/ScopingEntity.png|width=35|label=ScopingEntity+

+SourceAnchor>figures/SourceAnchor.png|width=35|label=SourceAnchor+

+SourceLanguage>figures/SourceLanguage.png|width=35|label=SourceLanguage+

+Sub>figures/Sub.png|width=35|label=Sub+

+SubInheritance>figures/SubInheritance.png|width=35|label=SubInheritance+

+SuperInheritance>figures/SuperInheritance.png|width=35|label=SuperInheritance+

+Template>figures/Template.png|width=35|label=Template+

+ThrownException>figures/ThrownException.png|width=35|label=ThrownException+

+Type>figures/Type.png|width=35|label=Type+

+TypeAlias>figures/TypeAlias.png|width=35|label=TypeAlias+

+TypedStructure>figures/TypedStructure.png|width=35|label=TypedStructure+

+WithClassScope>figures/WithClassScope.png|width=35|label=WithClassScope+

+WithModifiers>figures/WithModifiers.png|width=35|label=WithModifiers+

+WithSignature>figures/WithSignature.png|width=35|label=WithSignature+
