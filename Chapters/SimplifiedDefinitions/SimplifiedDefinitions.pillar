!!Simplified definitions

The meta-model builder provides ways to make the definition of some common constructs simpler. This chapter will describe them.

!!!Simplified traits generation
@ch:simplifiedTraitsGeneration

Because traits should be the main providers of the behavior and classes play only a role of entities composing traits, the classes offer a simple message ==as:== that can define a trait related to it.

[[[­lan­gua­ge=­Sma­lltalk
behavior := builder newClassNamed: #Behavior.
behavior as: #TBehavior.	
]]]

This code creates a new trait and then sets the class as an user of this new trait. So the code above is equivalent to: 

[[[­lan­gua­ge=­Sma­lltalk
behavior := builder newClassNamed: #Behavior.
tBehavior := builder newTraitNamed: #TBehavior.
tBehavior <|-- behavior
]]]

In most cases a related construct (==as:property:==) is used for the description of relations between properties without the need to separately create traits:

[[[­lan­gua­ge=­Sma­lltalk
method := builder newClassNamed: #Method.	
comment := builder newClassNamed: #Comment.	
	
(method as: #TMethod property: #comments) 
    -*
(comment as: #TComment property: #owningMethod).
]]]

Note that the object returned by the ==as:== message is not the trait created but an alias class. If you want to get the defined trait, you need to send the ==trait== message to it.

[[[­lan­gua­ge=­Sma­lltalk
behavior := builder newClassNamed: #Behavior.
tBehavior := (behavior as: #TBehavior) trait.
]]]

Of course such traits can then be used by other classes too (with ==\<\|\-\-==).

!!!Automatic properties generation

Relations can be defined directly on classes. In that case the corresponding traits are generated and named automatically. 

[[[­lan­gua­ge=­Sma­lltalk
access := builder newClassNamed: #Access.	
variable := builder newClassNamed: #Variable.	
variable -* access.
]]]

In this case the traits named ==TAccess== and ==TWithAccesses== are automaticaly generated. The properties in them are defined and named automatically too. The example above is equivalent to the following code:

[[[­lan­gua­ge=­Sma­lltalk
access := builder newClassNamed: #Access.	
variable := builder newClassNamed: #Variable.	
(variable as: #TWithAcceses property: #accesses) 
	-*
(access as: #TAccess property: #accessOwner).
]]]

!!!Associations generation
@ch:AssociationsGeneration

Often you have in the meta-model a relation of two entities where you want to be able to describe more detailed properties of such relations. For example a variable can be used in a method and you want to be able to model concrete accesses within the method. You want to be able to know where in the code the access takes place, if it is reading or storing into the variable, etc. The meta-model builder provides the method ==link:throughAssociation:link:with:== that simplifies the definition of such relations that are named ''associations''. The message allows you to control the names of the properties. It will be clearer with an example:

[[[­lan­gua­ge=­Sma­lltalk
access := builder newClassNamed: #Access.	
variable := builder newClassNamed: #Variable.	
method := builder newClassNamed: #Method.	
		
(method as: #TWithAccesses)
    link: #accesses -> #accessor
    throughAssociation: (access as: #TAccess) 
    link: #variable <- #incomingAccesses
    with: (variable as: #TAccessible).
]]]

This will generate three traits named ==TWithAccesses==, ==TAccess== and ==TAccessible== and define two relations between them. A collection of four relation sides are returned as result of this message. It enables to set the other properties of such relations like comments.

[[[­lan­gua­ge=­Sma­lltalk
sides := (method as:...)
sides first comment: 'This is a comment'.
]]]

This code will set the comment of a property named ==accesses== of the class ==TWithAccesses==. The ==source== and ==target== properties are set automatically.